package io.github.sandeeplakka.codewars.kyu6;

import org.junit.jupiter.api.Test;

import java.math.BigInteger;

import static org.junit.jupiter.api.Assertions.assertEquals;

/*
Description:

Create a function that takes a integer number n and returns the formula for (a+b)^n as a string.

formula(0)  --> "1"
formula(1)  --> "a+b"
formula(2)  --> "a^2+2ab+b^2"
formula(-2) --> "1/(a^2+2ab+b^2)"
formula(3)  --> "a^3+3a^2b+3ab^2+b^3"
formula(5)  --> "a^5+5a^4b+10a^3b^2+10a^2b^3+5ab^4+b^5"

Important notes :

    Your string may not have spaces so you can't do this : a^5 + 5a^4 b + 10a^3 b^2...
    You will show raised to power of by ^ and not using **.
    You need not put * between each multiplication
    There is no need to show a^1 or b^1 since that is basically a and b
    a^0 and/or b^0 also don't need be shown instead be a normal person and use 1 since that is what they equate to.
    You will need to handle both positive and negative numbers + 0
    Note :
        a^-n = 1/a^n
    You will not be tested for float (only negative integers and whole numbers)
    input n goes from -200 to 200.

    You will need to use BigInt since otherwise it will not work for both JS and Java

Categories : Puzzles, Mathematics, Algorithms, Numbers, Algebra, Strings

 */
public class PolynomialEquation {
    @Test
    public void tests() {
        assertEquals("1", formula(0));
        assertEquals("a+b", formula(1));
        assertEquals("a^2+2ab+b^2", formula(2));
        assertEquals("a^3+3a^2b+3ab^2+b^3", formula(3));
        assertEquals("a^5+5a^4b+10a^3b^2+10a^2b^3+5ab^4+b^5", formula(5));
        assertEquals("1/(a+b)", formula(-1));
        assertEquals("1/(a^2+2ab+b^2)", formula(-2));
        assertEquals("1/(a^4+4a^3b+6a^2b^2+4ab^3+b^4)", formula(-4));
        assertEquals("1/(a^135+135a^134b+9045a^133b^2+400995a^132b^3+13232835a^131b^4+346700277a^130b^5+7511839335a^129b^6+138432467745a^128b^7+2214919483920a^127b^8+31254974939760a^126b^9+393812684240976a^125b^10+4475144139102000a^124b^11+46243156104054000a^123b^12+437531400061434000a^122b^13+3812773629106782000a^121b^14+30756373941461374800a^120b^15+230672804560960311000a^119b^16+1614709631926722177000a^118b^17+10585318698186289827000a^117b^18+65183278299357679461000a^116b^19+378063014136274540873800a^115b^20+2070345077412932009547000a^114b^21+10728151764776102231289000a^113b^22+52707876061726067484159000a^112b^23+245970088288054981592742000a^111b^24+1092107191998964118271774480a^110b^25+4620453504611002038842122800a^109b^26+18652941926022193416066347600a^108b^27+71947061714657031747684483600a^107b^28+265459848395458703344904818800a^106b^29+937958130997287418485330359760a^105b^30+3176954959829521901321280250800a^104b^31+10325103619445946179294160815100a^103b^32+32226838569785832014160562544100a^102b^33+96680515709357496042481687632300a^101b^34+278992345332717345722590012881780a^100b^35+774978737035325960340527813560500a^99b^36+2073591755851277569559790636283500a^98b^37+5347684001932242153075249535678500a^97b^38+13300649953523781765341005255405500a^96b^39+31921559888457076236818412612973200a^95b^40+73964589985449322987749980444694000a^94b^41+165539796634100865734488051471458000a^93b^42+358027932255148384030404390391758000a^92b^43+748603858351673893881754634455494000a^91b^44+1513843358000051652071992705232221200a^90b^45+2961867439565318449706072684149998000a^89b^46+5608642598325815787741286572113826000a^88b^47+10282511430263995610859025382208681000a^87b^48+18256703968019747309076228739839903000a^86b^49+31401530824993965371611113432524633160a^85b^50+52335884708323275619351855720874388600a^84b^51+84542582990368368308183766933720166200a^83b^52+132396875249067444709042502933939128200a^82b^53+201047106859695008632249726677463120600a^81b^54+296087557375187194531131415652263868520a^80b^55+422982224821695992187330593788948383600a^79b^56+586238522121297954084195033496963549200a^78b^57+788389736645883455492538148495916497200a^77b^58+1028915419012424170727549787020094411600a^76b^59+1303292864082403949588229730225452921360a^75b^60+1602409259117709774083889012572278182000a^74b^61+1912552986688879407777544950489493314000a^73b^62+2216132825845844393139060021995762094000a^72b^63+2493149429076574942281442524745232355750a^71b^64+2723286299452874167722806450106330727050a^70b^65+2888333953965169571827218962233987134750a^69b^66+2974552877964129857553404602897688243250a^68b^67+2974552877964129857553404602897688243250a^67b^68+2888333953965169571827218962233987134750a^66b^69+2723286299452874167722806450106330727050a^65b^70+2493149429076574942281442524745232355750a^64b^71+2216132825845844393139060021995762094000a^63b^72+1912552986688879407777544950489493314000a^62b^73+1602409259117709774083889012572278182000a^61b^74+1303292864082403949588229730225452921360a^60b^75+1028915419012424170727549787020094411600a^59b^76+788389736645883455492538148495916497200a^58b^77+586238522121297954084195033496963549200a^57b^78+422982224821695992187330593788948383600a^56b^79+296087557375187194531131415652263868520a^55b^80+201047106859695008632249726677463120600a^54b^81+132396875249067444709042502933939128200a^53b^82+84542582990368368308183766933720166200a^52b^83+52335884708323275619351855720874388600a^51b^84+31401530824993965371611113432524633160a^50b^85+18256703968019747309076228739839903000a^49b^86+10282511430263995610859025382208681000a^48b^87+5608642598325815787741286572113826000a^47b^88+2961867439565318449706072684149998000a^46b^89+1513843358000051652071992705232221200a^45b^90+748603858351673893881754634455494000a^44b^91+358027932255148384030404390391758000a^43b^92+165539796634100865734488051471458000a^42b^93+73964589985449322987749980444694000a^41b^94+31921559888457076236818412612973200a^40b^95+13300649953523781765341005255405500a^39b^96+5347684001932242153075249535678500a^38b^97+2073591755851277569559790636283500a^37b^98+774978737035325960340527813560500a^36b^99+278992345332717345722590012881780a^35b^100+96680515709357496042481687632300a^34b^101+32226838569785832014160562544100a^33b^102+10325103619445946179294160815100a^32b^103+3176954959829521901321280250800a^31b^104+937958130997287418485330359760a^30b^105+265459848395458703344904818800a^29b^106+71947061714657031747684483600a^28b^107+18652941926022193416066347600a^27b^108+4620453504611002038842122800a^26b^109+1092107191998964118271774480a^25b^110+245970088288054981592742000a^24b^111+52707876061726067484159000a^23b^112+10728151764776102231289000a^22b^113+2070345077412932009547000a^21b^114+378063014136274540873800a^20b^115+65183278299357679461000a^19b^116+10585318698186289827000a^18b^117+1614709631926722177000a^17b^118+230672804560960311000a^16b^119+30756373941461374800a^15b^120+3812773629106782000a^14b^121+437531400061434000a^13b^122+46243156104054000a^12b^123+4475144139102000a^11b^124+393812684240976a^10b^125+31254974939760a^9b^126+2214919483920a^8b^127+138432467745a^7b^128+7511839335a^6b^129+346700277a^5b^130+13232835a^4b^131+400995a^3b^132+9045a^2b^133+135ab^134+b^135)", formula(-135));
    }

    @Test
    public void tests_getNcX() {
        assertEquals(BigInteger.ONE, getNcX(100, 0));
        //Casting to long is redundant
        assertEquals(BigInteger.valueOf(2), getNcX(2, 1));
        assertEquals(BigInteger.valueOf(3), getNcX(3, 2));
        assertEquals(BigInteger.valueOf(6), getNcX(4, 2));
    }

    public static String formula(int m) {
        if (m == 0) return "1";
        boolean isNegativeSigned = m < 0;
        m = Math.abs(m);
        StringBuilder builder = new StringBuilder(isNegativeSigned ? "1/(" : "");
        int num = 0;
        while (num <= m) {
            BigInteger factor = getNcX(m, num);
            if (factor.compareTo(BigInteger.ONE) > 0) builder.append(factor);
            if (m - num > 0) builder.append("a").append(m - num > 1 ? "^" + (m - num) : "");
            if (num > 0) builder.append("b").append(num > 1 ? "^" + num : "");
            if (num < m) builder.append("+");
            num++;
        }
        builder.append(isNegativeSigned ? ")" : "");
        return builder.toString();
    }


    private static BigInteger getNcX(int number, int idx) {
        if (idx == 0) return BigInteger.ONE;
        if (idx == 1) return BigInteger.valueOf(number);
        return BigInteger.valueOf(number).multiply(getNcX(number - 1, idx - 1))
                .divide(BigInteger.valueOf(idx));

    }
}